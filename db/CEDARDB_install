#!/usr/bin/perl
#
# This script requires a executable called cedarinventory.
# If such program does not exist you must compiled by the command:
# g++ cedarinventory.cc -I../api/include -o cedarinventory -lcedar++ -L../api/lib
#
# This script requieres MySQL to be installed and its binaries (mysql, mysqladmin, etc. 
# to be available.
# 
#----------------------------------------------------------------------------------

#----------------------------------------------------------------------------------
# 
#                                      GLOBAL VARIABLES
#
# program_name: name of this program. 
#
$program_name=$0;

#
# debug parameters?
#
$debug="";
$dfile="";
$dfile_passed="";

$checksum="";

$p1=$ARGV[0];
$p2=$ARGV[1];
if($ARGV[0] eq "-d" && $ARGV[1] ne "")
{
    $debug="-d $ARGV[1]";
    $dfile="$ARGV[1]";
    $dfile_passed="-d i_$dfile";
    `echo "" > i_$dfile`;
}

#
# log_file: name of the file for dumping error messages.
$log_file="./".$program_name.".log";
#
#
# files: Array containing the list of cbf files for creating the inventory.
@files=();
#
#----------------------------------------------------------------------------------


require ("CEDARDB_install_lib.pl");
print "Beginning processing at ",`date`;
select STDOUT; $| = 1;
open (LOGFILE,">$log_file") || die ("could not create log file");
open (STDERR,">&LOGFILE") || die ("could not redirect stderr");
if( $dfile )
{
    open (DEBUG,">$dfile") || die ("could not create debug file");
}

# get information from user, such as database information, cedar data
# location, etc...
get_data_from_user();
if( $dfile )
{
    print DEBUG "Done getting user data\n" ;
}

# grab the list of cedar .cbf files
get_cbf_files();
if( $dfile )
{
    print DEBUG "Done getting CEDAR data file list\n" ;
}

# grab the list of madrigal .001 files
get_mad_files();
if( $dfile )
{
    print DEBUG "Done getting MADRIGAL data file list\n" ;
}

# validate that we can connect to the database
validate_connection_data();
if( $dfile )
{
    print DEBUG "Done validating database connection\n" ;
}

# grab the version from tbl_version
get_database_version();
if( $dfile )
{
    print DEBUG "Done getting database version\n" ;
}

# verify that we can find cedarinventory and it matches the database version
verify_cedarinventory();
if( $dfile )
{
    print DEBUG "Done verifying cedarinventory script\n" ;
}

# drop the tables that get generated by harvester
drop_generated_tables();
if( $dfile )
{
    print DEBUG "Done dropping generated tables\n" ;
}

# create the tables that are to be generated
load_schema();
if( $dfile )
{
    print DEBUG "Done loading schema\n" ;
}

load_tbl_dates();
if( $dfile )
{
    print DEBUG "Done loading table dates\n" ;
}


# now parse the files and fill in the database
cedar_inventory_driver();
if( $dfile )
{
    print DEBUG "Done running inventory driver\n" ;
}

# This sets the last modified column in the version table for the latest
# version.
set_last_modified();
if( $dfile )
{
    print DEBUG "Done modifying version date\n" ;
}

print "Ending processing at ",`date`;

if( $dfile )
{
    print DEBUG "\nDone\n" ;
}

